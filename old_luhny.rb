#!/usr/bin/env ruby

def test_it s
  a = a.is_a?(String) ? s.scan(/\d/) : s
  a = a.map{|ns| ns.to_i }
  i = a.length - 2
  n = 0
  while i >= 0 do
    n = a[i] * 2
    if n == 10
      n = 1
    elsif n == 12
      n = 3
    elsif n == 14
      n = 5
    elsif n == 16
      n = 7
    elsif n == 18
      n = 9
    end
    a[i] = n
    i -= 2
  end
  total = 0
  a.each{|n| total += n }
  total % 10 == 0
end

def iterate s
  len = s.length
  result = false
  match_start = 0
  match_len = 0
  if len >= 14
    n = 0
    max_len = len > 16 ? 16 : len
    while n + max_len - 1 < len do
      result = test_it(s[n...n + max_len])
      if result
        match_start = n
        match_len = max_len
        break
      end
      if max_len == 16
        result = test_it(s[n...n + 15])
        if result
          match_start = n
          match_len = 15
          break
        end
      end
      if max_len == 16 or max_len == 15
        result = test_it(s[n...n + 14])
        if result
          match_start = n
          match_len = 14
          break
        end
      end
      n += 1
      max_len -= 1 if max_len > 14 and n + max_len >= len
    end
  end
  [result, match_start, match_len]
end

def mask s
  match_from = 0
  len = s.length
  masked_s = nil
  while match_from < len and md = s.match(/\d[\d\s\-]+\d/, match_from)
    found, match_start, match_len = iterate(md[0].scan(/\d/))
    if found
      masked_s = s[0..-1] if not masked_s
      n = md.begin(0)
      while match_start > 0
        match_start -= 1 if /\d/ =~ s[n]
        n += 1
      end
      match_from = n + 1
      while match_len > 0
        if /\d/ =~ s[n]
          masked_s[n] = 'X'
          match_len -= 1 
        end
        n += 1
      end
    else
      match_from = md.end(0)
    end
  end
  masked_s || s
end

def sample_test
[ #'56613959932537',
#  '508733740140655',
#  '6853371389452376',
  '49536290423965',
#  '306903975081421',
#  '6045055735309820',
#  '5872120460121',
#  '99929316122852072',
#  '0003813474535310',
#  '0114762758182750',
#  '9875610591081018250321',
#  '0' * 1000,
#  '4352 7211 4223 5131',
#  '7288-8379-3639-2755',
#  'java.lang.FakeException: 7230 3161 3748 4124 is a card #.',
#  "4111 1111 1111 111 doesn't have enough digits.",
#  '56613959932535089 has too many digits.',

  #'5212843322137064296101908962963186202766554788983704435814703972605368416396055678877682488862234546927406211307521284332213706429610190896296318620276655478898370443581470397260536841639605567887768248886223454692740621130752128433221370642961019089629631862027665547889837044358147039726053684163960556788776824888622345469274062113075212843322137064296101908962963186202766554788983704435814703972605368416396055678877682488862234546927406211307521284332213706429610190896296318620276655478898370443581470397260536841639605567887768248886223454692740621130752128433221370642961019089629631862027665547889837044358147039726053684163960556788776824888622345469274062113075212843322137064296101908962963186202766554788983704435814703972605368416396055678877682488862234546927406211307521284332213706429610190896296318620276655478898370443581470397260536841639605567887768248886223454692740621130752128433221370642961019089629631862027665547889837044358147039726053684163960556788776824888622345469274',
  #'5451496852732996063216961135925002811586537152199011985874232493633063047918301881385483284586533476253043731721256291647129524137724321728426184434461211703740649863341542579718271551110706936707319896126135944655506777360650140073402696573847382312143994860950153547889826890506187544774005026327396239056283010290981735778560515623251759619833225650753259593746554508212002384743816147220901767420098517594528110348433559626620298669171000062321471778438988210772771125375553564585320157635817785646893772472227467874437527001732836456864256454316370375336790286880557855773092293464498480234269658315323895080609167720971257548045968322939533404152970558280322501801922337656360557826932953501196791996392141409716242024358132638936168824328539157595191336754405365165167449323818836023303930252215414173373588852488517005006682091203000533131570369087503070508446066122223326556254899598241462739083519446495374791938334509806165682356091342533772992235963750210739883141610937988149208758059239',
].each do |s|
  puts mask(s)
end
end

#sample_test

n_repeats = ARGV[0] ? ARGV[0].to_i : 1
lines = STDIN.readlines
n_repeats.times do
  lines.each do |s|
    puts mask(s)
  end
end




